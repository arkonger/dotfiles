" A collection of maps and functions to handle long code comments without word
"   wrap:
" -----------------------------------------------------------------------------
"   __        : Splits the current line at the start of the word containing
"                 column 80. 
" -----------------------------------------------------------------------------
"   _<Enter>  : Splits the current line using __, adds the comment delimiter
"                 (which is assumed to be the current word) to the start of
"                 the new line, and matches the previous line's indentation. 
" -----------------------------------------------------------------------------
"   _-        : Works just as _<Enter>, but also indents the text after the
"                 delimiter
" -----------------------------------------------------------------------------
"   _<BS>     : Merges the current line with the previous one by deleting the
"                 comment delimiter and all the whitespace before the start of
"                 the text, and then backspacing into the previous line. 
" -----------------------------------------------------------------------------
"   IndentComment(internalIndent)
"             : A function which performs the indentation in _<Enter> and _-
"               Arg: boolean internalIndent, which specifies whether to indent
"                 after the delimiter. For _<Enter>, this is false. For _-,
"                 this is true. 
" -----------------------------------------------------------------------------
"   GotoWordBegin()
"             : A function which moves the cursor to the beginning of the
"                 current word. This can be achieved naively with "normal wb",
"                 but this solution handles punctuation poorly. Since this
"                 function detects words purely off of whitespace, it is able
"                 to handle punctuation much better. 
" -----------------------------------------------------------------------------
"   SplitLine()
"             : A function which performs the line splitting in __
"               Return: either 0, indicating that it successfully split the
"                 line, or 1, indicating that it could not split the line. 
" -----------------------------------------------------------------------------
"   UnsplitLine()
"             : A function which performs the deletion in _<BS>
" -----------------------------------------------------------------------------
function! GotoWordBegin()
  " If the cursor starts at column 1, it must already be at the beginning of
  "   the word.
  if col(".") == 1
    return
  endif
  " Search backwards for the last whitespace (or, failing that, the beginning
  "   of the line) and move the cursor there
  call search('\s\|^', 'beW')
  " The cursor should only be moved forward if it is currently on a whitespace
  "   character. Otherwise, it will be incorrectly moved to the next word. 
  if getline(".")[col(".")-1] !~ '\s'
    return
  endif
  " Move forwards to the next non-whitespace character
  normal w
endfunction

function! SplitLine()
  " If the current line is less than 80 characters long, it doesn't need
  "   split. 
  if strchars(getline(".")) < 80
    return 1
  endif
  " Move the cursor to column 80
  normal 80|
  " Move the cursor to the beginning of the current word
  call GotoWordBegin()
  " Switch to insert mode, type <BS><CR><Esc> to split the line
  normal i
  return 0
endfunction

function! IndentComment(internalIndent)
  " Both maps begin by: 
  "   1. Saving the start column as col1
  "   2. Yanking the comment delimiter
  "   3. Calling SplitLine() and checking that is was successful. 
  "   4. Calling GotoWordBegin()
  "   5. Saving the resulting column as col2
  let col1 = virtcol(".")
  normal yw
  let wasNotSplit=SplitLine()
  if wasNotSplit
    return
  endif
  call GotoWordBegin()
  let col2 = virtcol(".")
  " Pastes the comment delimiter, and then adds a tab if internalIndent is true
  exec "normal P" . (a:internalIndent ? "a\<Tab>\<Esc>" : "")
  " Returns the cursor to the beginning of the line
  normal ^
  " Now the indentation needs to be checked. If the two columns are equal,
  "   then autoindent worked properly. Otherwise, the line is indented to
  "   match. 
  if col1 == col2
    return
  else
    let tabs = float2nr(ceil((col1-col2)/&tabstop))
    exec "normal V" . tabs . ">^"
  endif
endfunction

function! UnsplitLine()
  " Deletes from the comment delimiter to the start of the text, then deletes
  "   from there to the start of the line, then drops in and out of insert
  "   mode to delete the newline. 
  normal dwd0i
  " If the previous line did not end with a space, one needs to be added.
  "   Since the <Esc> at the end of the previous command moves the cursor back
  "   one, the current character is the last one of the previous line. 
  if getline(".")[col(".")-1] =~ '\s'
    " Even if a space is not needed, the cursor should still be moved to the
    "   start so that the command can be repeated as desired. 
    normal ^
    return
  endif
  " The previous line did not end with a space, so one is added and the cursor
  "   is moved to the beginning of the line. 
  normal a ^
endfunction

nmap <silent> __ :call SplitLine()<CR>
nmap <silent> _<Enter> :call IndentComment(0)<CR>
nmap <silent> _- :call IndentComment(1)<CR>
nmap <silent> _ :call UnsplitLine()<CR>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" Other assorted maps and functions: 

" A function to toggle tabs/spaces
function! ToggleTabs()
  if &expandtab
    set noexpandtab
    echo "Tabs enabled"
  else
    set expandtab
    echo "Spaces enabled"
  endif
endfunction
" A map to call ToggleTabs()
nmap <silent> _<Tab> :call ToggleTabs()<CR>

" The default behavior of Y is redundant with yy, and inconsistent with D/dd
"   and C/cc. 
" New behavior: yank to end of line
nmap <silent> Y y$

" The default behavior of [n]>> is redundant with >[n]>, and it's nice to be
"   able to indent a single line multiple times without switching to visual
"   mode or spamming >>. 
" New behavior: indent current line [n] times
nmap <silent> >> @='V>'<Esc>

" A function to toggle a "very magic mode" shortcut: 
"     Vim has a very versatile search function, given that it is capable of
"   executing all but the most arcane RegExes. However, the default search
"   behavior notably interprets many special characters (such as parentheses,
"   brackets, and even periods and plus signs) as literal characters; to use
"   them as special characters in a RegEx, they need to be escaped. While this
"   is very convenient for mundane (non-RegEx) searches, it makes even simple
"   RegExes quite cumbersome to type. Fortunately, the \v and \V
"   metacharacters can be used to drop in and out of "very magic mode", which
"   interprets all special characters as suchâ€”no need to escape!
"     A simple map can be used to default to VMM by prepending searches with
"   \v, but this may not always be desirable. Therefore, the below function
"   sets and unsets the map as a toggle. 
function! ToggleVMM()
  if !exists("s:VMM")
    let s:VMM=0
  endif
  if s:VMM
    nunmap /
    nunmap ?
    echo "Very magic mode disabled"
    let s:VMM=0
  else
    nmap <silent> / /\v
    nmap <silent> ? ?\v
    echo "Very magic mode enabled"
    let s:VMM=1
  endif
endfunction
" A map to call ToggleVMM()
nmap <silent> _/ :call ToggleVMM()<CR>

" A map to clear search results by emptying the search register
nmap <silent> _? :let @/=""<CR>
